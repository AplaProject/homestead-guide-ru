################################################################################
Шаблонизатор страниц
################################################################################
********************************************************************************
Общее описание функций
********************************************************************************
Типы функций
==============================
Шаблоны страниц приложений создаются с помощью набора функций, который можно рассматривать как специализированный язык для создания интерфейсов приложений eGaaS. Функции можно разделить на несколько групп по типу выполняемых операций:

* получение значений из базы данных;
* оперирование с форматами и значениями переменных;
* представление данных в виде таблиц и диаграмм;
* построение форм с необходимым набором полей для ввода данных контрактов;
* вывод элементов навигации и вызова контрактов;
* создание элементов HTML разметки страницы – различных контейнеров с возможностью указания css классов;
* реализация условного вывода фрагментов шаблонов страниц; 
* создание многоуровневого меню.

Форматы функций
==============================
Для реализации функций языка построения шаблонов страниц используется два  формата FuncName() и FuncName{}. В первом случае параметры передаются как массив строк, а во втором как ассоциированный массив с именованными параметрами (ключами) и значениями. Значения можно не заключать в кавычки. Если значение содержит запятую или закрывающую скобку, то его следует заключить в двойные или обратные  (``) кавычки. Если функция не имеет параметров или только один параметр, то вместо круглых скобок можно ставить двоеточие: *MyFunc:param* эквивалентно *MyFunc(param)*.

Например,

.. code:: js

      FuncName( string 1, string 2, "Text, text")

.. code:: js

      FuncName{ ParamName1: string 1, ParamName2: string 2, ParamName3: "Text, text" }

Классы элементов HTML
==============================
Функции для создания элементов HTML разметки страницы и системы навигации содержат параметры для имен css классов,  которые перечисляются через пробел. На данный момент используются классы из `Angular Bootstrap Angle <http://themicon.co/theme/angle/v3.5.3/backend-jquery/app/buttons.html#/>`_. Кроме классов в этих же параметрах можно указывать дополнительные атрибуты, которые будут вставлены в соответствующий элемент. Значения атрибутов указываются через знак равенства. Если атрибут не имеет значения, то знак равенства сохраняется, но после него ничего не указывается (знак равенства можно опустить только если атрибут начинается с *data-*). Например, 

.. code:: js

      Div(panel data-widget=panel-scroll myclass data-sweet-alert=, Text)

будет преобразовано в 

.. code:: js

      <div class="panel myclass" data-sweet-alert data-widget="panel-scroll">Text</div>
   
Использование языковых ресурсов
==============================
Шаблонизатор поддерживает функцию замены текстовых элементов страницы на произвольный язык, если перевод этого элемента указан в таблице *languages* Language Resources  (пункт Languages меню Government dashboard). Для перевода имя текстового ресурса должно быть обрамлено знаками **$**, например, $Call contract$, или можно использовать функцию LangRes("Call contract").

Такие функции, как Label(), Select(), StateVal(), а также функции создания меню производят автоматическую замен текстов на языковые ресурсы.


.. note::

      Функции в будущем могут дополняться новыми параметрами.


********************************************************************************
Операции с  переменными
********************************************************************************

SetVar( name=value,.....)
==============================
Функция присваивает значения переменным без вывода их на страницу. 

* *name* - имя переменной, 
* *value* - значение; если в значении имеются запятые, то его необходимо заключить в обратные кавычки ``; при необходимости подставить значения выражений, используется формат  **#=** вместо **=**.
Например,

.. code:: js

      SetVar( var1= value1, var2 = "Значение 2", var3=10, `var4 #= #citizen_id#, #state_id#` )
      
К переменным в дальнейшем можно обращаться как  #var1#, #var2# …

StateLink(prefix,name) 
==============================
Функция выводит значение переменной с именем prefix_name.

********************************************************************************
Операции со значениями
********************************************************************************

And(param, [param,...]) 
==============================
Функция возвращает результат выполнения логической операции **И** со всеми перечисленными в скобках через запятую параметрами. Значение параметра принимается как **false**, если он равен пустой строке (""), 0 или *false*. Во всех остальных случаях значение параметра считается **true**.

Or(param, [param,...]) 
==============================
Функция возвращает результат выполнения логической операции **ИЛИ** со всеми перечисленными в скобках через запятую параметрами. Значение параметра принимается как **false**, если он равен пустой строке (""), 0 или *false*. Во всех остальных случаях значение параметра считается **true**.

CmpTime(time1,time2) 
==============================
Функция сравнивает два значения времени в одинаковом формате (желательно стандартном - YYYY-MM-DD HH:MM:SS, но можно и в произвольном при условии соблюдения последовательности от годов к секундам, например, YYYYMMDD). Возвращает: 

* **-1** - time1 < time2, 
* **0** - time1 = time2, 
* **1** - time1 > time2.

If(condition, iftrue, iffalse) 
==============================
Функция выводит одно из двух значений  в зависимости истинности или ложности условия. 

* *condition* - условное выражение, принимает значение *false* если равно пустой строке или  0;
* *iftrue* - значение, возвращаемое если условие истинно;
* *iffalse* - значение, возвращаемое если условие ложно.

Допускаются вложения функций.

Mult(num1,num2) 
==============================
Функция выводит округленный до целого результат умножения  двух чисел (параметры могут быть десятичными дробями).

Trim(text) 
==============================
Функция удаляет пробелы и невидимые символы с начала и с конца строки *text*.

********************************************************************************
Преобразование значений
********************************************************************************

Address([wallet_id]) 
==============================
Функция возвращает адрес кошелька в формате 1234-5678-...-7990 по числовому значению адреса; если адрес не указан, то в качестве аргумента принимается значение адреса текущего пользователя.

Money(value) 
==============================
Функция выводит значение в формате денег,  количество знаков после запятой определяется  значением параметра **money_digit**  в таблице state_parameters. 

Date(date,[format]) 
==============================
Функция выводит  значение даты в заданном формате. 

*  *date* - время в стандартном формате 2006-01-02T15:04:05
*  *format * -  шаблон формата: YY короткий год, YYYY полный год, MM - месяц, DD – день, например, DD.MM.YY. Если формат не указан, то будет использовано значение параметра  *dateformat*, определенное в таблице languages,  если его нет, то YYYY-MM-DD.

DateTime(datetime,[format]) 
==============================
Функция выводит  значение даты и времени в заданном формате. 

*  *datetime* - время в стандартном формате 2006-01-02T15:04:05
*  *format* -  шаблон формата : YY короткий год, YYYY полный год, MM - месяц, DD - день, HH - часы, MM - минуты, SS – секунды, например, YY/MM/DD HH:MM. Если формат не указан, то будет использовано значение параметра  *timeformat* определенное в таблице languages, если его нет, то YYYY-MM-DD HH:MI:SS.

Now([format]) 
==============================
Функция выводит текущее время в указанном формате, по умолчанию выводится  в UNIX-формате (число секунд с 1970 года), если в качестве формата указано *datetime*, то дата и время выводится в виде YYYY-MM-DD HH:MI:SS.

********************************************************************************
Элементы HTML
********************************************************************************

A(class,text, href) 
==============================
Функция создает контейнер <a href="*href*">*text*</a> с указанными классами (*class*).

Div(class,text) 
==============================
Функция создает контейнер <div>text</div> с указанными классами(*class*).

Divs(class,[class,]) … DivsEnd 
==============================
Функция заключает часть шаблона страницы во вложенные друг в друга контейнеры *div*; количество контейнеров равно количеству  параметров с указанными классами. 

.. code:: js

      Divs(md-5, panel) 
          Any content.
      DivsEnd:


P(class, text) 
==============================
Функция создает контейнер <p>*text*</p> с указанными классами (*class*).

Em(class,text) 
==============================
Функция создает контейнер <em>*text*</em> с указанными классами (*class*).

Small(class,text) 
==============================
Функция создает контейнер <small>*text*</small> с указанными классами  (*class*).

Span(class,text) 
==============================
Функция создает контейнер <span>*text*</span> с указанными классами  (*class*).

Strong(class,text) 
==============================
Функция создает контейнер  <strong>*text*</strong> с указанными классами  (*class*).

Label(text,[class]) 
==============================
Функция создает контейнер <label>*text*</label> с указанными классами. 
Если в таблице languages имеется языковой ресурс со значением, указанным в *text*, то текст будет автоматически переводиться.

Legend(class, text) 
==============================
Функция создает контейнер <legend>*text*</legend> с указанными классами (*class*). 

Tag(tagname, [text], [class]) 
==============================
Функция создает контейнер  <tagname>*text*</tagname> с указанными классами; поддерживаются тэги h1-h6, button.

Image(src, [alt], [class] ) 
==============================
Функция вставляет в страницу изображение. 

* *src* - указатель источник изображения;
* *alt* - альтернативный текст для изображений; 
* *class*  - список классов.

MarkDown(text) 
==============================
Функция преобразует текст с разметкой markdown в HTML. Например,

.. code:: js

      MarkDown(`## Header
            Any Text
      `)

Val(idname) 
==============================
Функция возвращает значение HTML элемента по его идентификатору (id).

********************************************************************************
Условная конструкция 
********************************************************************************

If(condition) … Else … ElseIf … IfEnd 
==============================
Условная конструкция позволяет выводить разные фрагменты  шаблона страницы в зависимости от истинности или ложности условного выражения. Конструкции **If** могут быть вложенными, например,

.. code:: js

      If(#value#) 
          Divs(myclass)
              If(#par#)
                 ...
              IfEnd:
          DivsEnd:
      ElseIf(#param2#)
          P(class, Text)
      Else:
          Divs(myclass2)
              .....
          DivsEnd:
      IfEnd:

********************************************************************************
Вывод элементов форм
********************************************************************************

Form(class) … FormEnd 
==============================
Функция обрамляет часть шаблона страницы контейнером <form>…</form>  с указанными классами (*class*).

Input(idname,[class],[placeholder],[type],[value]) 
==============================
Функция создает поле ввода формы;

* *idname* - имя идентификатора поля;
* *class*  - список классов;
* *placeholder* - текст подсказка;
* *type* - тип поля, по умолчанию *text*;
* *value* - значение по умолчанию.

Textarea(idname,[class],[value]) 
==============================
Функция выводит поле формы типа *textarea*.

* *idname* - имя идентификатора поля;
* *class*  - список классов;
* *value* - значение по умолчанию.


InputAddress(idname,[class],[value] ) 
==============================
Функция создает поле формы для ввода  адреса кошелька, при вводе адреса предполагаемые варианты показываются в выпадающем списке. 

* *idname* - имя идентификатора поля;
* *class*  - список классов;
* *value* - значение по умолчанию.

InputDate(idname,[class],[value] ) 
==============================
Функция создает поле формы для ввода даты и времени. 

* *idname* - имя идентификатора поля;
* *class*  - список классов;
* *value* - значение по умолчанию.

InputMoney(idname,[class],[value]) 
==============================
Функция создает поле формы для ввода денежных значений. 

* *idname* - имя идентификатора поля;
* *class*  - список классов;
* *value* - значение по умолчанию.

Select(idname, list, [class], [value]) 
==============================
Функция создает разворачивающийся список  <select>. 

* *idname* - идентификатор. 
* *list* - передает список значений; 
* *value* - значение списка, выбранное по умолчанию;
* *class*  - список классов.

Существует два варианта определения списка *list*: 

1. перечисление  имен списка через запятую, при этом значение value в <option … >  будет равно порядковому номеру имени начиная с 1;

2. получение значений из таблиц базы данных в формате **tablename.column.idname**, где tablename - имя таблицы, column - имя колонки, значения которой выводятся как имена списка, idname - имя колонки, значения которой используются в качестве value в <option … >. Если *idname* не указан, то по умолчанию используется колонка *id*; количество записей в таблице не может быть больше 50.
Если в таблице languages имеются языковые ресурсы со значением имен списка, то они будут автоматически переводиться.

TextHidden(idname,....) 
==============================
Функция создает множество скрытых полей textarea; в качестве  идентификаторов (id)  устанавливаются перечисленные через запятую имена; значения полей берутся из одноименных переменных. Например, если есть переменная #test# = "Строка", то TextHidden(test) создаст textarea с id="test" и значением "Строка".

Source(idname,[value]) 
==============================
Функция выводит поле ввода текста с подстветкой операторов, ключевых слов и т.д. Используется, например, для редактирования контрактов.

* *idname* - идентификатор; 
* *value* - значение по умолчанию.

********************************************************************************
Получение значений из базы данных
********************************************************************************

ValueById(table,idval,columns,[aliases]) 
==============================
Функция получает значения из записи таблицы базы данных по значению id строки.

* *table* - имя таблицы; 
* *idval* - значение id получаемой записи;
* *columns*  - имена колонок, перечисленные через запятую; по умолчанию будут созданы переменные с именами колонок, которым и будут переданы полученные значения; 
* *aliases*  - имена переменных, отличные от имен колонок, перечисленные через запятую в том же порядке, что и имена колонок.
Например, * ValueById(#state_id#_citizens, #citizen#, "name,avatar", "FirstName,Image") *

GetList(name, table, colnames, [where], [order], [limit]) 
==============================
Функция получает записи из таблицы table. 

*  *name* - имя, по которому извлекается конкретная запись из полученного списка с помощью функций **ListVal** или **ForList**;
*  *colnames* - список получаемых колонок, перечисленных через запятую; первым, необходимо указывать колонку с индексом и по этому значению будет реализован доступ к значениям в **ListVal** или **ForList**; 
*  *where*, *order *, *limit * - условие, сортировка и кол-во получаемых строк.

ListVal(name, index, column]) 
==============================
Функция возвращает значение из списка полученного функцией **GetList**; 

* *name* - в качестве значения параметра  следует использовать имя, которое было указано в функции *GetList*;
* *index* - значение идентификатора поиска по первой колонке, указанной в *GetList*; 
* *column* - имя колонки с возвращаемым значением.

ForList(name) … FormListEnd 
==============================
Функция  выводит полный список записей, полученных с помощью функции **GetList**; в качестве значения параметра *name* следует использовать имя, которое было указано в функции *GetList*. Конец шаблона вывода одной записи фиксируется закрывающей функции **FormListEnd**. Значения колонок записи содержат переменные вида #name_column#, в которых после знака подчеркивания указывается имя колонки таблицы; доступна переменная #index#, которая содержит порядковый номер записи, начиная с 1.

.. code:: js

      GetList(my, #state#_mytable, "id,param,value")
      ForList(my)
          Divs(md-5, panel) 
             Strong(#my_index#: #my_ param #)
             P(pclass, #my_value#)
          DivsEnd: 
      ForListEnd:

GetOne(colname, table, where, [value]) 
==============================
Функция возвращает  значение из таблицы базы данных по условию.

* *colname* - имя возвращаемой колонки;
* *table* полной имя таблицы (#state#_mytable); 
* *where*  условие,
* *value* - значение условия, если параметр *value* не указан, то тогда параметр *where* должен содержать полный запрос.

GetRow(prefix, table, colname, [value]) 
==============================
Функция формирует множество переменных со значениями из  записи таблицы базы данных, полученной поиском по указанному полю и значению или по запросу.

* *prefix* - префикс, используемый для образования имен переменных, в которые записываются значения полученной записи: переменные имеют вид *#prefix_id#, #prefix_name#*, где после знака подчеркивания указывается имя колонки таблицы.
* *table* - полной имя таблицы (#state#_mytable); 
* *colname* - имя колонки, по которой ищется запись;
* *value* - значение, по которому ищется запись, если параметр *value* не указан, тогда параметре *colname * должен содержать полный запрос where к таблице.

StateVal(name, [index]) 
==============================
Функция выводит значение параметра из таблицы state_parameters.

* *name* - имя значения;
* *index* - порядковый номер значения, если их список приведен через запятую, например, *gender | male,female*, тогда StateVal(gender, 2) возвратит *female*  
Если есть языковый ресурс полученным именем, то подставится его значение.

Table 
==============================
Функция создает таблицу со значениями из базы данных. Функция имеет именованные параметры, которые выводятся в фигурных кнопках: 

* *Table* - имя таблицы;
* *Order* - имя колонки для сортировки строк таблицы, необязательный параметр;
* *Where* - условие выборки, необязательный параметр;
* *Columns* - массив отображаемых колонок, состоящий из заголовка и значений [[ColumnTitle, value],...]; соответствующие строке значения колонки из таблицы базы возвращаются переменной с именем колонки (#column_name#).

.. code:: js
     Table{
         Table:  citizens
         Order: id
         Columns: [[Avatar, Image(#avatar#)],  [ID, Address(#id#)],  [Name, #name#]]
     }

********************************************************************************
Вызов контрактов
********************************************************************************

BtnContract(contract, name, message, params, [class], [onsuccess], [pageparams]) 
==============================
Функция создает кнопку, при клике на которой открывается модальное окно с предложением отказаться  или подтвердить вызов контракта. 

* *contract* - имя контракта;
* *name* - название кнопки;
* *message* - текст для модального окна;
* *params* - параметры, передаваемые контракту;
* *class*  - список классов кнопки;
* *onsuccess* - имя страницы, на которую следует сделать переход в случае успешного выполнения контракта;
* *pageparams* - параметры, передаваемые странице в формате *var:value* через запятую.

Например, *BtnContract(DelContract, Delete, Delete Item?, "IdItem:id_item",'btn btn-default')*

TxButton 
==============================
Функция создает кнопку при клике на которой запускается выполнение контракта. Функция имеет именованные параметры, которые выводятся в фигурных кнопках:

* *Contract* - имя контракта;
* *Name* - название кнопки, по умолчанию **Send**;
* *Class* - список классов для контейнера <div> с кнопкой;
* *ClassBtn* - список классов для кнопки;
* *Inputs* - список передаваемых в контракт значений. По умолчанию, значения параметров контракта (секция *data*) берутся их HTML элементов (скажем, полей формы) с одноименными идентификаторами (*id*). Если идентификаторами элементов отличаются от названий параметров контракта, то используется присваивание в формате *Inputs: "contractField1=idname1, contractField2=idname2" Присваивать можно и значения переменных в формате *Inputs: "contractField1#=var1, contractField2=var2" (будут переданы значения переменных #var1# и #var2#);
* *OnSuccess* - имя страницы, на которую будет осуществлен переход в случае успешного выполнения контракта, и через запятую передаваемые на страницу параметры в формате *var:value*, например,  * OnSuccess: "CompanyDetails, CompanyId:#CompanyId#" *;
* *Silent* - при значении 1 вывод сообщения  об успешной выполнении контракта;
* *AutoClose* - при значении 1 автоматическое закрытие сообщения об успешном выполнении контракта.

Например,

.. code:: js

      TxButton {
          Contract: MyContract,
          Inputs: 'Name=myname, Request #= myreq',
         OnSuccess: "MyPage, RequestId:# myreq#"
      }


TxForm 
==============================
Функция создает форму для вода данных контракта. Функция имеет именованные параметры, которые выводятся в фигурных кнопках:

* *Contract* - имя контракта;
* *OnSuccess* - имя страницы, на которую будет осуществлен переход в случае успешного выполнения контракта, и через запятую передаваемые на страницу параметры в формате *var:value*, например,  * OnSuccess: "CompanyDetails, CompanyId:#CompanyId#" *;
* *Silent* - при значении 1 происходит вывод сообщения  об успешной выполнении контракта;
* *AutoClose* - при значении 1 происходит автоматическое закрытие сообщения об успешном выполнении контракта.

.. code:: js

      TxForm {
          Contract: MyContract,
          OnSuccess: 'mypage'
      }

********************************************************************************
Элементы навигации
********************************************************************************

Navigation( params, …) 
==============================
Функция выводит панель с «хлебными крошками» и ссылкой на редактирование текущей страницы **Edit**. Например, Navigation( LiTemplate(dashboard_default, citizen),goverment).

LinkPage(page,text,[params]) 
==============================
Функция создает ссылку  на страницу. Если *name* не указан, то текст ссылки будет такой же как *page*. C помощью этой же функции можно создавать ссылки на предопределенные страницы. В этом случае добавьте префикс **sys-** перед именем страницы. Например, *LinkPage(sys-interface, Interface)*. Кроме этого, эту функцию можно использовать для создания ссылок на приложения. Для этого перед именем страницы-приложения необходимо указывать **app-**.

* *page* - имя страницы;
* *text*  - текст ссылки;
* *params* - параметры передаваемые странице в формате *var:value* через запятую.


LiTemplate(page, [text], [params], [class]) 
==============================
Функция создает контейнер  <li>*text*</li> содержащий ссылку  на страницу. 

* *page* - имя страницы;
* *text*  - текст ссылки;
* *params* - параметры передаваемые странице в формате *var:value* через запятую;
* *class*  - список классов.

.. code:: js

      LiTemplate(mypage, Home page, global:1)

BtnPage(page, name,[params],[class], [anchor]) 
==============================
Функция создает кнопку, при клике на которой происходит переход на указанную страницу. Если параметр с классом не указан, то у кнопки будут классы *btn btn-primary*. C помощью этой же функции можно создавать ссылки на системные страницы. В этом случае добавьте префикс sys- перед именем страницы. Например, *BtnPage(sys-interface, Interface)*.

* *page* - имя страницы перехода; 
* *name* - название  кнопки;
* *params* - параметры, передаваемые странице;
* *class*  - список классов кнопки;
* *anchor* - якорь (id элемента страницы) для скроллинга страницы в указанное положение.

BtnEdit( page, icon, [params] ) 
==============================
Функция создает кнопку с указанной иконкой. Может использоваться в таблицах для перехода на страницы редактирования. Для перехода на системные страницы или страницы приложений необходимо добавлять соответствено префиксы **sys-** и **app-**. Например,
*BtnEdit(sys-editPage, cog, "name: #name#, global: #global#")*.

Back(page, [params]) 
==============================
Функция вписывает вызов указанной страницы в историю вызовов. 

* *page* - имя страницы;
* *params* - параметры вызова страницы из истории в формате *var:value* через запятую.

********************************************************************************
Оформление шаблона страницы
********************************************************************************

PageTitle(header) … PageEnd() 
==============================
Функция фиксирует тело страницы и создает панель с заголовком, указанным в параметре *header*. 

Title(text) 
==============================
Функция создает заголовок с классом *content-heading*.

FullScreen(state) 
==============================
Функция переводит ширину рабочей области страницы на всю ширину окна когда параметр *state* равен 1, сужает рабочую область  при *state* равном  0.

WhiteMobileBg(state) 
==============================
Функция является аналогом функции **FullScreen** для мобильных устройств; переводит ширину рабочей области страницы на всю ширину окна когда параметр *state* равен 1, сужает рабочую область  при *state* равном  0.

********************************************************************************
Организация многоуровневого меню
********************************************************************************

MenuItem(title, page, [params], [icon]) 
==============================
Функция создает пункт меню. 

* *title* - имя пункта меню, если в таблице languages имеется языковой ресурс со значением, указанным в *title*, то текст будет автоматически переводиться;
* *page* - имя страницы перехода. Для перехода на системные страницы необходмо указывать префиксы **sys-** или **app-**;
* *params* - параметры, передаваемые странице в формате *var:value* через запятую.
* *icon* - иконка.

MenuGroup(title,[idname],[icon]) … MenuEnd: 
==============================
Функция формирует в меню вложенное подменю. 

* *title* - имя пункта меню, если в таблице languages имеется языковой ресурс со значением, указанным в *title*, то текст будет автоматически переводиться;
* *idname* - идентификатор подменю;
* *icon* - иконка.

.. code:: js

      MenuGroup(My Menu,mycitizen)
            MenuItem(Interface, sys-interface)
            MenuItem(Dahsboard, dashboard_default)
      MenuEnd:

MenuBack(title, [page]) 
==============================
Функция заменяет ссылку перехода к родительскому меню (верхний пункт меню).

* *title* - имя пункта меню, если в таблице languages имеется языковой ресурс со значением, указанным в *title*, то текст будет автоматически переводиться;
* *page* - имя страницы перехода.


MenuPage(page) 
==============================
Функция устанавливает в качестве родительского пункта меню указанную  в параметре *page* страницу.

********************************************************************************
Представление данных
********************************************************************************

Ring(count,[title],[size]) 
==============================
Функция выводит круг со значением параметра *count* посередине. 

* *title* - заголовок;
* *size* - размер значения.

WiAccount(address) 
==============================
Функция выводит в специальном оформлении номер аккаунта (адрес кошелька), переданном в параметре address.

WiBalance(value, money) 
==============================
Функция выводит в специальном оформлении значение *value* в денежном формате и добавляет обозначение валюты указанной в параметре *money*.

WiCitizen(name, address, [image], [flag]) 
==============================
Функция выводит в специальном оформлении информацию о гражданине. 

* *name* - имя;
* *address*  - адрес кошелька, приведенный к виду 1234-...-5678;
* *name* - изображение;
* *name* - флаг страны. 

Map(coords) 
==============================
Функция выводит на страницу контейнер google maps с координатами указанными в параметре *coords* в формате: {"center_point":["23.907173","54.333531"], "zoom":"7", "cords":[["23.915970","54.239502"],["23.654588","55.371094"],["22.958393","55.316162"]]}. Высоты контейнера берется из значения предварительно определенной переменной #hmap# (по умолчанию 100 пикселей), ширина растягивается на максимально возможную величину.

MapPoint(coords) 
==============================
Функция выводит на страницу контейнер google maps с маркером по координатам указанным в параметре *coords*. Высоты контейнера берется из значения предварительно определенной переменной #hmap# (по умолчанию 100 пикселей), ширина растягивается на максимально возможную величину.

ChartPie 
==============================
The function displays a pie chart. The function has the named parameters, which are displayed in the shape buttons:

* *Data* - данные отражаемые диаграммой в виде списка [[value,color,label],....]; каждый элемент списка должен содержать три параметра: значение, цвет rrggbb и подпись; при наличии этого списка другие параметры будут игнорироваться;
* *Columns* - список цветов rrggbb через запятую;
* *Table* - имя таблицы, откуда будут браться данные;
* *FieldValue* - имя столбца со значениями;
* *FieldLabel* - имя столбца с подписями;
* *Order* - имя колонки для сортировки строк таблицы, необязательный параметр;
* *Where* - условие выборки, необязательный параметр;
* *Limit* - смещение и количество выбираемых записей, необязательный параметр.

ChartBar 
==============================
Функция выводит диаграмму в виде столбцов. Все параметры, за исключением *Data*, идентичны функции **ChartPie**.

********************************************************************************
Вывод языковых ресурсов
********************************************************************************

LangJS(resname) 
==============================
Функция создает контейнер <span>*resname*</span>  со значением языкового ресурса. Используется для автоматической подстановки языковых ресурсов в браузере. (Речь идет о ресурсах, которые описаны в static/js/lang/*.js.)

LangRes(resname) 
==============================
Функция возвращает из таблицы languages языковой ресурс с указанным именем.

********************************************************************************
Служебные функции
********************************************************************************

BlockInfo(blockid) 
==============================
Функция выводит ссылку с номером блока (blockid), при клике по которой будет открываться окно с информацией о блоке.

TxId(txname) 
==============================
Функция возвращается идентификатор указанной транзакции. Например,

.. code:: js

      SetVar(
      type_new_page_id = TxId(NewPage),
      type_new_contract_id = TxId(NewContract)
      )

Json(data) 
==============================
Функция создает тэг script с переменной jdata с присвоением ей указанных в параметре data  данными в формате json.
Например,

.. code:: js

      Json(`param1: 1, param2: "string"`) 
      
получим 

.. code:: js

      var jdata = { param1: 1, param2: "string"}
